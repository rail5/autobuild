#!/usr/bin/env bpp

# autobuild daemon
# Copyright (C) 2022-2025 rail5
# Free software (GNU Affero GPL v3)

@include_once <SharedQueue>

@class JobRunner {
	@private @SharedQueue* jobQueue=@nullptr

	@public @method setJobQueue @SharedQueue* queue {
		if [[ @queue == @nullptr ]]; then
			>&2 echo "Invalid pointer passed to setJobQueue"
			return 1
		fi
		@this.jobQueue=@queue
	}

	@public @method printHelp {
		echo "autobuild"
		echo "Copyright (C) 2022-2025 rail5"
		echo "This program comes with ABSOLUTELY NO WARRANTY."
		echo "This is free software (GNU Affero GPL V3), and you are welcome to redistribute it under certain conditions."
		echo "You should edit CONFIG and run setup before using this program"
		echo "BUILD OPTIONS"
		echo "  -p, --package <package>     Add a package to the build list"
		echo "                                Argument can be:"
		echo "                                - A URL to a Git repository"
		echo "                                - A path to a .tar.gz archive"
		echo "                                - A package name from the CONFIG file"
		echo "  -0, --local                  Build packages locally (do not use VMs)"
		echo "  -1, --amd64                  Build packages on the amd64 VM"
		echo "  -2, --arm64                  Build packages on the arm64 VM"
		echo "  -b, --bell                   Ring a bell when the build is done"
		echo "  -n, --no-upgrade             Do not upgrade the VMs before building"
		echo "  -L, --log <directory>        Specify a directory to output build logs to"
		echo "DISTRIBUTION OPTIONS"
		echo "  -o, --output <directory>     Specify a directory to output packages to"
		echo "  -d, --debian-repo <repo>     Distribute packages to a Debian repository"
		echo "  -f, --forgejo-page           Make a Forgejo release page for each package"
		echo "  -g, --github-page            Make a GitHub release page for each package"
		echo "  -u, --upgrade                Upgrade the VMs and exit"
		echo "CONFIG OPTIONS"
		echo "  -s, --setup                  Run the setup script"
		echo "  -l, --list                   List all packages in the CONFIG file"
		echo "  -C, --create-signing-key     Create a new GPG key for signing packages"
		echo "  -E, --key-email <email>      Specify the email address to use for the GPG key"
		echo "  -N, --key-name <name>        Specify the name to use for the GPG key"
		echo "  -c, --clear-logs             Clear all logs in /var/autobuild/log"
		echo "  -r, --remove <subdir|all>    Remove a directory under /var/autobuild/builds"
		echo "                                 If 'all', remove all old builds"
		echo "  -h, --help                   Display this help message"
		echo "EXAMPLES"
		echo "  autobuild -0 -p mypackage -o ~/Desktop"
		echo "  autobuild -123 -p mypackage -d myrepo"
	}

	@private @method testRunJob jobID {
		echo "Pushing the job onto the queue: $jobID"
		@this.jobQueue.enqueue "$jobID"
		while [[ "@this.jobQueue.front" != "$jobID" ]]; do
			echo "Waiting for job $jobID to be at the front of the queue..."
			sleep 1
		done
		echo "Running job: $jobID"
		# Sleep to simulate work
		sleep 5
		echo "Job $jobID completed"

		# Announce that we're done by dequeuing the job
		@this.jobQueue.dequeue
	}

	@public @method runCommand {
		local clientFifo="$1"
		shift 1
		if ! [[ -p "$clientFifo" ]]; then
			>&2 echo "Client FIFO does not exist: $clientFifo"
			return 1
		fi
		if [[ -z "$1" ]]; then
			>&2 echo "No command provided to run"
			return 1
		fi

		# Redirect all output to the client FIFO
		exec >"$clientFifo" 2>&1

		# Getopt on $@
		TEMP=$(getopt \
			-o 012bcCd:DE:fghik:lL:nN:o:p:r:su \
			--long local,amd64,arm64,bell,clear-logs,create-signing-key,debian-repo:,delete-signing-key,key-email:,forgejo-page,github-page,help,install-vm,kill:,list,log:,no-upgrade,key-name:,output:,package:,remove:,setup,upgrade \
			-n 'autobuild' -- "$@")
		if [ $? -ne 0 ]; then
			>&2 echo "Error parsing options"
			return 1
		fi
		eval set -- "$TEMP"

		while true; do
			case "$1" in
				-0|--local)
					# Queue testing
					@this.testRunJob "$RANDOM$RANDOM$RANDOM"
					shift ;;
				-1|--amd64) shift ;;
				-2|--arm64) shift ;;
				-b|--bell) shift ;;
				-c|--clear-logs) shift ;;
				-C|--create-signing-key) shift ;;
				-d|--debian-repo) shift 2 ;;
				-D|--delete-signing-key) shift ;;
				-E|--key-email) shift 2 ;;
				-f|--forgejo-page) shift ;;
				-g|--github-page) shift ;;
				-h|--help)
					@this.printHelp
					exit 0
					;;
				-i|--install-vm) shift ;;
				-k|--kill) shift 2 ;;
				-l|--list) shift ;;
				-L|--log) shift 2 ;;
				-n|--no-upgrade) shift ;;
				-N|--key-name) shift 2 ;;
				-o|--output) shift 2 ;;
				-p|--package) shift 2 ;;
				-r|--remove) shift 2 ;;
				-s|--setup) shift ;;
				-u|--upgrade) shift ;;
				--) shift; break ;; # End of options
				* ) break ;; # Unknown option
			esac
		done
	}
}
