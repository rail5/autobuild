#!/usr/bin/env bpp

# autobuild daemon
# Copyright (C) 2022-2025 rail5
# Free software (GNU Affero GPL v3)

## ROUGH OUTLINE
### 1. When the daemon is started, it should create a FIFO file (call it FIFO #1) in a known location.
### 2. A client is expected to create its own independent FIFO file (call it FIFO #2),
###		and write the location of FIFO #2 to FIFO #1, followed by
###		a command to execute.
### 3. The daemon, when receiving this message in FIFO #1,
###		should fork itself, open communication to FIFO #2,
###		begin executing the command,
###		and write the output of the command to FIFO #2.

@include_once <SharedQueue>

@include_once "JobRunner.bpp"

@class Daemon {
	# Path to use in production:
	#@private globalFifo="/var/autobuild/daemon/1.fifo"

	# Path to use in development:
	@private globalFifo="/tmp/1.fifo"

	@private @SharedQueue jobQueue # Destructor called automatically along with the Daemon destructor

	@private @JobRunner* runner=@nullptr

	@public @method listen {
		while true; do
			local clientFifo cmd
			if read -r clientFifo cmd <"@this.globalFifo"; then
				if ! [[ -p "$clientFifo" ]]; then
					>&2 echo "Client FIFO does not exist: $clientFifo"
					continue
				fi
				if [[ -z "$cmd" ]]; then
					>&2 echo "No command provided by client: $clientFifo"
					continue
				fi
				echo "Received command from client FIFO: $clientFifo"
				echo "Command: $cmd"
				@this.runner.runCommand "$clientFifo" ${cmd# } & # Run the command in the background
			fi
		done
	}

	@public @method cleanUp {
		echo "Cleaning up..."
		# Remove the global FIFO if it exists
		if [[ -p "@this.globalFifo" ]]; then
			rm -f "@this.globalFifo"
		fi
		# Clean up the JobRunner
		@delete @this.runner
		@delete @this.jobQueue
		exit 0
	}

	@constructor {
		# Create the global FIFO if it doesn't exist
		if ! [[ -p "@this.globalFifo" ]]; then
			mkfifo -m 600 "@this.globalFifo"
		fi

		# Enable encryption on the job queue
		@this.jobQueue.setEncrypted 1

		# Initialize the JobRunner
		@this.runner=@new JobRunner

		# Pass the address of the shared queue to the JobRunner
		@this.runner.setJobQueue &@this.jobQueue
	}

	@destructor {
		@this.cleanUp
	}
}
