#!/usr/bin/env bash

# autobuild
# Copyright (C) 2024 rail5
# Free software (GNU Affero GPL v3)

if [[ "$(whoami)" != _autobuild ]]; then
	echo "Setup must be run via autobuild -s"
	exit 1
fi

local_storage_directory="/var/autobuild"
autobuild_directory="/usr/share/autobuild"
window_title="Autobuild settings"

BUILDFARM_SCRIPTS_FILE="$autobuild_directory/build-farm/scripts/scripts.sh"
# shellcheck source=./build-farm/scripts/scripts.sh
. "$BUILDFARM_SCRIPTS_FILE"

function setup_single_vm() {
	if [[ $# != 1 ]]; then
		echo "bag args to setup_single_vm" && exit
	fi
	local ARCH="$1"

	ARCH_DIRECTORY="$local_storage_directory/build-farm/debian-stable-$ARCH"
	cd "$ARCH_DIRECTORY" || (echo ""; echo "Local storage directory is not properly configured"; echo "Run this script through 'autobuild -s'"; sleep 3; exit)

	rm -f "./image.qcow"
	rm -f "./preseed.cfg"

	cp ../preseed.cfg ./preseed.cfg

	download_vm_image "$ARCH" "$ARCH_DIRECTORY" 2>/dev/null | dialog --title "$window_title" \
			--progressbox "Downloading $ARCH image... (Please wait)" 15 55
	preseed_vm_image "$ARCH" "$ARCH_DIRECTORY" 2>/dev/null | dialog --title "$window_title" \
			--progressbox "Preparing $ARCH image... (Please wait)" 15 55
	install_vm "$ARCH" "$ARCH_DIRECTORY" 2>/dev/null | dialog --title "$window_title" \
			--progressbox "Installing $ARCH VM... (Please wait, this may take a while)" 15 55

	rm -f "./"*.iso
}

function setup_build_farm() {
	amd64_vm_is_configured=$(test -f "$local_storage_directory/build-farm/debian-stable-amd64/image.qcow" && echo "true" || echo "false")
	i386_vm_is_configured=$(test -f "$local_storage_directory/build-farm/debian-stable-i386/image.qcow" && echo "true" || echo "false")
	arm64_vm_is_configured=$(test -f "$local_storage_directory/build-farm/debian-stable-arm64/image.qcow" && echo "true" || echo "false")

	amd64_info_string="Not installed"
	i386_info_string="Not installed"
	arm64_info_string="Not installed"

	if [[ $amd64_vm_is_configured == true ]]; then
		amd64_info_string="Installed"
	fi

	if [[ $i386_vm_is_configured == true ]]; then
		i386_info_string="Installed"
	fi

	if [[ $arm64_vm_is_configured == true ]]; then
		arm64_info_string="Installed"
	fi

	#	--checklist "prompt"  width  height  list_height \
	#			"Option Tag" "Option comment" "Status"
	#			"Second option name" "Second option comment" "Status"
	#		The option is marked with '*' by default if status = "on"
	{ user_choice="$(dialog --title "$window_title" \
		--checklist "Which build farm VMs do you want to install?" 15 55 3 \
		"amd64" "$amd64_info_string" off \
		"i386" "$i386_info_string" off \
		"arm64" "$arm64_info_string" off \
		2>&1 1>&3 3>&- )"; } 3>&1 # Capture stderr output into user_choice variable

	if [[ "$user_choice" != "" ]]; then
		dialog --title "$window_title" \
			--yesno "Are you sure you want to build VM(s) for $user_choice?\nThis will permanently erase & overwrite the currently-existing VMs for those architectures if they are already installed" 15 55
		
		if [[ $? -eq 0 ]]; then
			for choice in $user_choice; do
				setup_single_vm "$choice"
			done
		else
			dialog --title "$window_title" \
				--infobox "Cancelled" 15 55; sleep 3
		fi
	fi

}

function clear_builds_directory() {
	rm -rf "${local_storage_directory:?}/builds/"*
	dialog --title "$window_title" \
		--infobox "Cleared $local_storage_directory/builds" 15 55; sleep 3
}

function setup_main_menu() {
	{ next_page="$(dialog --title "$window_title" \
		--menu "These settings can be reached anytime with 'autobuild -s'" 15 55 \
		3 \
		1 "Install build farm" \
		2 "Clear 'builds' directory" \
		3 "Exit" \
		2>&1 1>&3 3>&- )"; } 3>&1 # Capture stderr output into next_page variable
					# 'dialog' writes user responses to stderr

	case $next_page in
		"" | 3) # User pressed "cancel" or "Exit"
			exit ;;
		1)
			setup_build_farm
			setup_main_menu
			;;
		2)
			clear_builds_directory
			setup_main_menu
			;;

	esac
}


setup_main_menu
