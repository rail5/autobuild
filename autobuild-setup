#!/bin/bash

packagemanager="apt-get"
installcommand="install"
updatecommand="update"

# Build Dependencies
basepkgslist="build-essential gcc g++ make git wget tar curl"

packagingdeps="devscripts make sed unzip xz-utils jq reprepro"

buildfarmdeps="sshpass libarchive-tools syslinux syslinux-utils cpio genisoimage coreutils qemu-system qemu-system-x86 qemu-utils util-linux"

# For restoring the CWD
scriptfile=$(readlink -f "$0")
initdir=$(dirname "$scriptfile")

storagedir="$HOME/.local/share/autobuild"

CONFIG_FILE="$storagedir/config"

if [ ! -f "$CONFIG_FILE" ]; then
	echo "Error: Run this script through 'autobuild -s'"
	exit 1
fi

. "$CONFIG_FILE"

echo "This script is to set up your machine to use autobuild"
echo ""
echo "EDIT YOUR CONFIG **BEFORE** RUNNING THIS SCRIPT! (Run 'autobuild -c')"
echo ""
echo ""

while true; do
	read -p "Have you edited your config? (y/n) " yn
	case $yn in
		[Yy]* ) echo "Alright then"; break;;
		[Nn]* ) exit 1; break;;
		* ) echo "Answer yes or no";;
	esac
done

echo "----"
echo "----"

echo "Updating package lists..."

sudo $packagemanager $updatecommand

echo "----"
echo "----"
echo "Base necessary packages are:"
echo "$basepkgslist $build_dependencies $packagingdeps"

installingbasedeps=0
while true; do
	read -p "Do you want to install these now? (y/n) " yn
	case $yn in
		[Yy]* ) echo "Alright then"; installingbasedeps=1; break;;
		[Nn]* ) echo "Moving on"; break;;
		* ) echo "Answer yes or no";;
	esac
done

if [[ installingbasedeps -eq 1 ]]; then

	echo "Installing build dependencies..."

	sudo $packagemanager $installcommand $basepkgslist $build_dependencies $packagingdeps

	echo "----"
	echo "----"
	echo "----"
	echo "----"

	echo "Build dependencies installed"
	echo "--"

fi

setupgithubhttps=0
while true; do
	read -p "Do you want to set up GitHub over HTTPS? (y/n) " yn
	case $yn in
		[Yy]* ) echo "Alright then"; setupgithubhttps=1; break;;
		[Nn]* ) echo "Moving on"; break;;
		* ) echo "Answer yes or no";;
	esac
done

if [[ setupgithubhttps -eq 1 ]]; then

	cd "$storagedir"
	
	read -p "Enter the email address associated with your GPG key: " gpgemail
	read -p "Enter your GitHub username: " ghuser
	read -p "Enter your GitHub Access Token: " ghtoken
	
	echo "machine github.com" > github-credentials
	echo "" >> github-credentials
	echo "login $ghuser" >> github-credentials
	echo "" >> github-credentials
	echo "password $ghtoken" >> github-credentials
	echo "" >> github-credentials
	echo "protocol https" >> github-credentials
	
	echo "$ghtoken" > github-token
	
	gpg --recipient $gpgemail -e ./github-credentials
	gpg --recipient $gpgemail -e ./github-token
	
	rm ./github-credentials
	rm ./github-token
	
	echo "#!/bin/bash" > credential-helper
	echo "" >> credential-helper
	echo "/usr/share/doc/git/contrib/credential/netrc/git-credential-netrc.perl -f /etc/git/github-credentials.gpg get" >> credential-helper
	
	ghreadyok=0
	echo "GitHub credential files will be moved to /etc/git/"
	echo "And git config variables will be set"
	while true; do
		read -p "Sound good? (y/n) " yn
		case $yn in
			[Yy]* ) echo "Alright then"; ghreadyok=1; break;;
			[Nn]* ) echo "Cancelling"; break;;
			* ) echo "Answer yes or no";
		esac
	done
	
	if [[ ghreadyok -eq 1 ]]; then
		sudo mkdir -p /etc/git
		sudo mv ./github-credentials.gpg /etc/git/
		sudo mv ./github-token.gpg /etc/git/
		sudo mv ./credential-helper /etc/git/
		sudo chmod +x /etc/git/credential-helper
		sudo chmod +x /usr/share/doc/git/contrib/credential/netrc/git-credential-netrc.perl
		
		git config --global credential.helper /etc/git/credential-helper
		git config --global user.name $ghuser
		
		echo "All set up!"
	fi
fi


echo "--"
echo "This script can also set up a virtual-machine Build Farm"
echo "This can be used to build packages on other architectures or for other distributions"
echo "This requires QEMU and a few more free (libre) utilities as well"
echo "Currently the build farm contains the following VMs:"
echo "  - Debian Stable i386"
echo "  - Debian Stable arm64"
echo "Setting the i386 VM up generally takes about 20-30 minutes"
echo "However, ARM VMs can take much longer (~2 hours each)"
echo "--"

buildingvms=0

while true; do
	read -p "Do you want to automagically prepare the Build Farm? (y/n) " yn
	case $yn in
		[Yy]* ) echo "Alright then"; buildingvms=1; break;;
		[Nn]* ) echo "Moving on"; break;;
		* ) echo "Answer yes or no";;
	esac
done

if [[ buildingvms -eq 1 ]]; then
	sudo $packagemanager $installcommand $buildfarmdeps
	
	cd $storagedir/build-farm
	
	echo "  Creating i386 VM..."
	
	cd debian-stable-i386
	
	bash ./set-install-packages.sh $basepkgslist $build_dependencies $packagingdeps
	
	make download
	make image
	make boot-install
	make clean
	
	echo "  Created i386 VM."
	echo "  Creating arm64 VM..."
	
	cd ../debian-stable-arm64
	
	bash ./set-install-packages.sh $basepkgslist $build_dependencies $packagingdeps
	
	make download
	make image
	make boot-install
	make clean
	
	echo "  Created arm64 VM."
fi

cd $initdir

exit 0
