#!/usr/bin/env bash

# autobuild
# Copyright (C) 2024 rail5
# Free software (GNU Affero GPL v3)

system_tmp_directory=$(dirname "$(mktemp -u)")
local_storage_directory="$HOME/.local/share/autobuild"
window_title="Autobuild settings"

function clean_terminal_window() {
	# Try not to screw up anybody's terminal window
	local i=0 limit=
	limit=$(tput lines)
	while [[ $i -lt $limit ]]; do
		echo ""
		i=$((i + 1))
	done
}

function clean_temporary_files() {
	# Clean any temporary files we may have created
	rm -f "$system_tmp_directory/autobuild.github_conf"
	rm -f "$system_tmp_directory/autobuild.github_conf.gpg"
	rm -f "$system_tmp_directory/autobuild.github_token"
	rm -f "$system_tmp_directory/autobuild.github_token.gpg"
	rm -f "$system_tmp_directory/autobuild.credential_helper"
}

function clean_exit() {
	clean_temporary_files
	clean_terminal_window
	exit 0
}

function setup_config_file() {
	autobuild -c 2>/dev/null # FIXME: Really shouldn't use xdg-open for this
}

function setup_single_vm() {
	if [[ $# != 1 ]]; then
		echo "bag args to setup_single_vm" && clean_exit
	fi
	local ARCH="$1"

	cd "$local_storage_directory/build-farm/debian-stable-$ARCH" || (clean_terminal_window; echo "Local storage directory is not properly configured"; echo "Run this script through 'autobuild -s'"; sleep 3; clean_exit)

	rm -f "./image.qcow"
	rm -f "./preseed.cfg"

	cp ../preseed.cfg ./preseed.cfg

	make download 2>/dev/null | dialog --title "$window_title" \
			--progressbox "Downloading $ARCH image... (Please wait)" 15 55
	make image 2>/dev/null | dialog --title "$window_title" \
			--progressbox "Preparing $ARCH image... (Please wait)" 15 55
	make boot-install 2>/dev/null | dialog --title "$window_title" \
			--progressbox "Installing $ARCH VM... (Please wait, this may take a while)" 15 55
	make clean 2>/dev/null

	rm -f "./"*.iso
}

function setup_build_farm() {
	amd64_vm_is_configured=false
	i386_vm_is_configured=false
	arm64_vm_is_configured=false

	if [[ -f "$local_storage_directory/build-farm/debian-stable-amd64/image.qcow" ]]; then
		amd64_vm_is_configured=true
	fi

	if [[ -f "$local_storage_directory/build-farm/debian-stable-i386/image.qcow" ]]; then
		i386_vm_is_configured=true
	fi

	if [[ -f "$local_storage_directory/build-farm/debian-stable-arm64/image.qcow" ]]; then
		arm64_vm_is_configured=true
	fi

	amd64_info_string="Not installed"
	i386_info_string="Not installed"
	arm64_info_string="Not installed"

	if [[ $amd64_vm_is_configured == true ]]; then
		amd64_info_string="Installed"
	fi

	if [[ $i386_vm_is_configured == true ]]; then
		i386_info_string="Installed"
	fi

	if [[ $arm64_vm_is_configured == true ]]; then
		arm64_info_string="Installed"
	fi

	#	--checklist "prompt"  width  height  list_height \
	#			"Option Tag" "Option comment" "Status"
	#			"Second option name" "Second option comment" "Status"
	#		The option is marked with '*' by default if status = "on"
	{ user_choice="$(dialog --title "$window_title" \
		--checklist "Which build farm VMs do you want to install?" 15 55 3 \
		"amd64" "$amd64_info_string" off \
		"i386" "$i386_info_string" off \
		"arm64" "$arm64_info_string" off \
		2>&1 1>&3 3>&- )"; } 3>&1 # Capture stderr output into user_choice variable

	if [[ "$user_choice" != "" ]]; then
		dialog --title "$window_title" \
			--yesno "Are you sure you want to build VMs for $user_choice?\nThis will permanently erase & overwrite any currently-existing VMs if they are already installed" 15 55
		
		if [[ $? -eq 0 ]]; then
			for choice in $user_choice; do
				setup_single_vm "$choice"
			done
		else
			dialog --title "$window_title" \
				--infobox "Cancelled" 15 55; sleep 3
		fi
	fi

}

function setup_github_https() {
	echo "machine github.com" > "$system_tmp_directory/autobuild.github_conf"
	echo "" >> "$system_tmp_directory/autobuild.github_conf"

	{ gpg_email="$(dialog --title "$window_title" \
		--inputbox "Enter the email address associated with your GPG key:" 15 55 \
		2>&1 1>&3 3>&- )"; } 3>&1

	if [[ "$gpg_email" == "" ]]; then
		clean_temporary_files
		return
	fi
	
	{ github_username="$(dialog --title "$window_title" \
		--inputbox "Enter your GitHub username:" 15 55 \
		2>&1 1>&3 3>&- )"; } 3>&1
	
	if [[ "$github_username" == "" ]]; then
		clean_temporary_files
		return
	fi

	echo "login $github_username" >> "$system_tmp_directory/autobuild.github_conf"
	
	echo "" >> "$system_tmp_directory/autobuild.github_conf"

	{ github_access_token="$(dialog --title "$window_title" \
		--inputbox "Enter your GitHub Access Token:" 15 55 \
		2>&1 1>&3 3>&- )"; } 3>&1
	
	if [[ "$github_access_token" == "" ]]; then
		clean_temporary_files
		return
	fi

	echo "password $github_access_token" >> "$system_tmp_directory/autobuild.github_conf"
	
	echo "" >> "$system_tmp_directory/autobuild.github_conf"

	echo "protocol https"  >> "$system_tmp_directory/autobuild.github_conf"

	echo "$github_access_token" > "$system_tmp_directory/autobuild.github_token"

	gpg --output "$system_tmp_directory/autobuild.github_conf.gpg" --recipient "$gpg_email" -e "$system_tmp_directory/autobuild.github_conf"

	gpg --output "$system_tmp_directory/autobuild.github_token.gpg" --recipient "$gpg_email" -e "$system_tmp_directory/autobuild.github_token"

	rm -f "$system_tmp_directory/autobuild.github_conf"
	rm -f "$system_tmp_directory/autobuild.github_token"

	echo "#!/usr/bin/env bash" > "$system_tmp_directory/autobuild.credential_helper"
	echo "" >> "$system_tmp_directory/autobuild.credential_helper"
	echo "/usr/share/doc/git/contrib/credential/netrc/git-credential-netrc.perl -f /etc/git/github-credentials.gpg get" >> "$system_tmp_directory/autobuild.credential_helper"

	clean_terminal_window

	echo "!! Github over HTTPS configuration files will be placed in /etc/git/ !!"
	echo "!! Moving them to /etc/git/ requires temporary root permissions !!"
	echo ""

	sudo mkdir -p /etc/git

	sudo mv "$system_tmp_directory/autobuild.github_conf.gpg" "/etc/git/github-credentials.gpg"
	sudo mv "$system_tmp_directory/autobuild.github_token.gpg" "/etc/git/github-token.gpg"
	sudo mv "$system_tmp_directory/autobuild.credential_helper" "/etc/git/credential-helper"

	sudo chmod +x "/etc/git/credential-helper"
	sudo chmod +x "/usr/share/doc/git/contrib/credential/netrc/git-credential-netrc.perl"

	git config --global credential.helper /etc/git/credential-helper
	git config --global user.name "$github_username"

	dialog --title "$window_title" --infobox "GitHub over HTTPS is now set up!" 15 55; sleep 3
}

function setup_main_menu() {
	{ next_page="$(dialog --title "$window_title" \
		--menu "What would you like to do?\nThese settings can be reached anytime with 'autobuild -s'" 15 55 \
		4 \
		1 "Edit config file" \
		2 "Install build farm" \
		3 "Set up Github over HTTPS" \
		4 "Exit" \
		2>&1 1>&3 3>&- )"; } 3>&1 # Capture stderr output into user_choice variable
					# 'dialog' writes user responses to stderr

	case $next_page in
		"" | 4) # User pressed "cancel" or "Exit"
			clean_exit ;;
		1)
			setup_config_file
			setup_main_menu
			;;
		2)
			setup_build_farm
			setup_main_menu
			;;
		3)
			setup_github_https
			setup_main_menu
			;;

	esac
}


setup_main_menu